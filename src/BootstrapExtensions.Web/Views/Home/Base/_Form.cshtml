@using BootstrapExtensions.Base
@using BootstrapExtensions.Base.Button
@using BootstrapExtensions.Base.Form
@using BootstrapExtensions.Base.Form.Label
@using BootstrapExtensions.Components.Alert
@using (Html.Section("Form", new { id = "form" }))
{

    <h2>Default styles</h2>
    <p>To use Bootstrap forms use <code>using (Html.Form()) { ... }</code>, in the same way that you would use <code>using (Html.BeginForm()) { ... }</code>. Individual form controls receive styling, resulting in stacked, left-aligned labels on top of form controls.</p>
    
    using (Html.Form("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" }))
    {
        <legend>Legend</legend>
        @Html.LabelAndControl("Phone", Html.TextBox("Phone", null, new{placeholder="Give us yer number..."}))
        <span class="help-block">Example block-level help text here.</span>
        <label class="checkbox">
        <input type="checkbox"> Check me out
        </label>
        <button type="submit" class="btn">Submit</button>
    }
    <pre class="prettyprint linenums">using (Html.Form()) {
    &lt;legend&gt;Legend&lt;/legend&gt;
    &#64;Html.LabelAndControl("Phone", Html.TextBox("Phone", null, new{placeholder="Give us yer number..."}))
    &lt;span class="help-block"&gt;Example block-level help text here.&lt;/span&gt;
    &lt;label class="checkbox"&gt;
        &lt;input type="checkbox"&gt; Check me out
    &lt;/label&gt;
    &lt;button type="submit" class="btn"&gt;Submit&lt;/button&gt;
}</pre>

    <hr class="bs-docs-separator">

    <h2>Optional layouts</h2>
    <p>Included with Bootstrap are three optional form layouts for common use cases.</p>

    <h3>Search form</h3>
    <p>Use <code>Html.SearchForm()</code> for an extra-rounded text input.</p>
    using (Html.SearchForm("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" }))
    {
        <input type="text" class="input-medium search-query">
        <button type="submit" class="btn">Search</button>
    }
    <pre class="prettyprint">using (Html.SearchForm()) {
    &lt;input type="text" class="input-medium search-query"&gt;
    &lt;button type="submit" class="btn"&gt;Search&lt;/button&gt;
}</pre>

    <h3>Inline form</h3>
    <p>Use <code>Html.InlineForm()</code> for left-aligned labels and inline-block controls for a compact layout.</p>
    
    using (Html.InlineForm("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" })) {
        <input type="text" class="input-small" placeholder="Email">
        <input type="password" class="input-small" placeholder="Password">
        <label class="checkbox">
            <input type="checkbox"> Remember mex`
        </label>
        <button type="submit" class="btn">Sign in</button>
    }
<pre class="prettyprint linenums">using (Html.InlineForm()) {
    &lt;input type="text" class="input-small" placeholder="Email"&gt;
    &lt;input type="password" class="input-small" placeholder="Password"&gt;
    &lt;label class="checkbox"&gt;
        &lt;input type="checkbox"&gt; Remember me
    &lt;/label&gt;
    &lt;button type="submit" class="btn"&gt;Sign in&lt;/button&gt;
}</pre>

    <h3>Horizontal form</h3>
    <p>Use <code>Html.HorizontalForm()</code> to right align labels and float them to the left, making them appear on the same line as controls:</p>
    using (Html.HorizontalForm("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" }))
    {
        @Html.LabelAndControl("Email", Html.TextBox("Email", null, new{placeholder="Email"}))
        @Html.LabelAndControl("Password", Html.TextBox("Password"))
        <div class="control-group">
            <div class="controls">
                <label class="checkbox">
                    <input type="checkbox"> Remember me
                </label>
                
            </div>
        </div>
    }
<pre class="prettyprint">using (Html.HorizontalForm())
{
    &#64;Html.LabelAndControl("Email", Html.TextBox("Email", null, new{placeholder="Email"}))
    &#64;Html.LabelAndControl("Password", Html.TextBox("Password"))
    &lt;div class="control-group"&gt;
        &lt;div class="controls"&gt;
            &lt;label class="checkbox"&gt;
                &lt;input type="checkbox"&gt; Remember me
            &lt;/label&gt;
            &lt;button type="submit" class="btn"&gt;Sign in&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
}</pre>
@Html.Alert("Heads up!", "Using <code>Html.LabelAndControl()</code> with horizontal forms will automatically take care of the required markup changes for labels/controls", Category.Info)

    <hr class="bs-docs-separator">

    <h2>Form controls</h2>

    <h3>Labels</h3>
    <p>With the exception of checkboxes and radios, few input types require additional markup, and so existing form code can usually be reused with no changes.</p>
    <p>It is recommended however to use Bootstrap Extension's <code>Html.LabelAndControl()</code> helper when rendering form controls, as it automatically adjusts the markup dependent on form type (notably horizontal forms)@*, and also offers an easy way to chain input modifiers (including prepended/appended buttons and text and validation states)*@.</p>
    
    <hr class="bs-docs-separator">
    
    <h2>Extending form controls</h2>
    <p>Adding on top of existing browser controls, Bootstrap includes other useful form components.</p>

    <h3>Prepended and appended inputs</h3>
    <p>Add text or buttons before or after any text-based input. Do note that <code>select</code> elements are not supported here.</p>
    using (Html.Form("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" }))
    {
        @Html.LabelAndControl(Html.TextBox("Prepend"))
        @Html.LabelAndControl(Html.TextBox("Append")).Append("Append")
        @Html.LabelAndControl(Html.TextBox("PrependAndAppend")).Prepend("Prepend").Append("Append")
    }
    <pre class="prettyprint">using (Html.Form())
{
    &#64;Html.LabelAndControl(Html.TextBox("Prepend")).Prepend("Prepend")
    &#64;Html.LabelAndControl(Html.TextBox("Append")).Append("Append")
    &#64;Html.LabelAndControl(Html.TextBox("PrependAndAppend")).Prepend("Prepend").Append("Append")
}</pre>
    
    <h3>Validation States</h3>
    <p>Bootstrap includes validation styles for error, warning, info, and success messages. To use, simply chain the appropriate method:</p>
    using (Html.HorizontalForm("Base", "Home", FormMethod.Get, new { @class = "bs-docs-example" }))
    {
        @Html.LabelAndControl("Warning", "Input with warning", Html.TextBox("Warning")).Warning()
        @Html.LabelAndControl("Error", "Input with error", Html.TextBox("Error")).Error()
        @Html.LabelAndControl("Info", "Input with info", Html.TextBox("Info")).Info()
        @Html.LabelAndControl("Success", "Input with success", Html.TextBox("Success")).Success()
    }
    <pre class="prettyprint">using (Html.HorizontalForm())
{
    &#64;Html.LabelAndControl("Warning", "Input with warning", Html.TextBox("Warning")).Warning()
    &#64;Html.LabelAndControl("Error", "Input with error", Html.TextBox("Error")).Error()
    &#64;Html.LabelAndControl("Info", "Input with info", Html.TextBox("Info")).Info()
    &#64;Html.LabelAndControl("Success", "Input with success", Html.TextBox("Success")).Success()
}</pre>
    }
@Html.Alert("Heads Up!", "Bootstrap currently only supports adding validation states to controls in horizontal forms", Category.Info)